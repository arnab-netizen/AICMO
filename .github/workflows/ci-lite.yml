name: ci-lite

permissions:
  contents: read

concurrency:
  group: ci-lite-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    - cron: '15 3 * * 1' # Mondays 03:15 UTC
  workflow_dispatch:

jobs:
  fast-sqlite:
    name: fast-sqlite (ci-lite) - quick sqlite + ruff
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}  # may be empty
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install backend deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run quick sqlite tests
        run: . .venv/bin/activate && pytest -q backend/tests/test_db_sqlite.py backend/tests/test_db_utils.py -q

      - name: Alembic offline SQL render (smoke)
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
        run: |
          . .venv/bin/activate
          python -m pip install -r backend/requirements.txt || true
          alembic -c "$ALEMBIC_CONFIG" upgrade head --sql | head -n 5

      - name: Wait for Postgres
        if: >
          github.ref == 'refs/heads/main' ||
          contains(join(fromJson(toJson(github.event.pull_request.labels)).*.name, ','), 'needs-pg')
        run: |
          python - <<'PY'
          import os, time, sqlalchemy as sa
          url=os.environ.get('DATABASE_URL','').replace('+asyncpg','+psycopg2')
          for _ in range(30):
              try:
                  sa.create_engine(url).connect().close()
                  print('Postgres ready')
                  break
              except Exception as e:
                  print('waiting...', e)
                  time.sleep(2)
          else:
              raise SystemExit('Postgres not ready')
          PY

      - name: Run Alembic migrations (online)
        if: >
          github.ref == 'refs/heads/main' &&
          env.DATABASE_URL != '' &&
          startsWith(env.DATABASE_URL, 'postgresql')
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
          PYTHONPATH: ${{ github.workspace }}
        run: |
          . .venv/bin/activate
          pip install -r backend/requirements.txt
          pip install -e ./capsule-core
          alembic -c "$ALEMBIC_CONFIG" upgrade head

  drift_check:
    name: Alembic Drift Check
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/main' ||
      contains(join(fromJson(toJson(github.event.pull_request.labels)).*.name, ','), 'run-drift-check')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -e ./capsule-core

      - name: Schema smoke (metadata → SQLite)
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
          SQLALCHEMY_URL: sqlite:///${{ github.workspace }}/.alembic_tmp/drift.sqlite
          PYTHONPATH: ${{ github.workspace }}
        run: |
          rm -rf .alembic_tmp
          mkdir -p .alembic_tmp .alembic_autogen/drift
          python - <<'PY'
          import os
          from sqlalchemy import create_engine
          # import Base from backend package (PYTHONPATH is set)
          from backend.db.base import Base

          db_path = os.path.join(os.getcwd(), '.alembic_tmp', 'drift.sqlite')
          engine = create_engine(f"sqlite:///{db_path}")
          # Create tables according to model metadata — avoid executing migrations
          Base.metadata.create_all(bind=engine)
          print('Created sqlite drift DB:', db_path)
          PY

  drift_check_pg:
    name: Alembic Drift Check (Postgres)
    runs-on: ubuntu-latest
    # Label-gated: only run when PR has label 'run-drift-check-pg'
    if: >
      contains(join(fromJson(toJson(github.event.pull_request.labels)).*.name, ','), 'run-drift-check-pg')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -e ./capsule-core

      - name: Upgrade to head on Postgres
        env:
          PYTHONPATH: ${{ github.workspace }}
          ALEMBIC_CONFIG: backend/alembic.ini
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # no-op (avoid attempting to dot-source a binary which fails on the runner)
          true
          # run alembic online against the provided Postgres DATABASE_URL
          ALEMBIC_CONFIG=backend/alembic.ini PYTHONPATH="${{ github.workspace }}" DATABASE_URL="$DATABASE_URL" alembic -c "$ALEMBIC_CONFIG" upgrade head

      - name: Autogenerate & detect drift
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
          SQLALCHEMY_URL: ${{ secrets.DATABASE_URL }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import pathlib, shutil, tempfile, sys, os
          from alembic.config import Config
          from alembic import command

          cfg = Config("backend/alembic.ini")
          tmp = pathlib.Path(tempfile.mkdtemp(prefix="alembic_drift_pg_"))
          try:
              cfg.set_main_option("script_location", str(tmp))
              # Ensure alembic uses the TEST Postgres DB via SQLALCHEMY_URL override in env
              rev = command.revision(cfg, message="DRIFT_PROBE_PG", autogenerate=True)
              vers = tmp / "versions"
              files = sorted(vers.glob("*.py")) if vers.exists() else []
              if not files:
                  print("No revision file created → no drift.")
                  sys.exit(0)
              code = files[0].read_text().lower()
              tokens = (
                  "op.create_table","op.alter_column","op.drop_table",
                  "op.add_column","op.drop_column","op.create_index","op.drop_index"
              )
              outdir = pathlib.Path(".alembic_autogen/drift"); outdir.mkdir(parents=True, exist_ok=True)
              out = outdir / files[0].name
              out.write_text(code)
              if any(t in code for t in tokens):
                  print(f"Schema drift detected → see {out}")
                  sys.exit(1)
              print("Autogenerate produced a trivial/no-op file → no drift.")
          finally:
              shutil.rmtree(tmp, ignore_errors=True)
          PY

      - name: Upload drift artifact (PG)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alembic-drift-autogen-pg
          path: .alembic_autogen/drift/**
          retention-days: 7

      - name: Autogenerate into temp dir and detect drift
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
          SQLALCHEMY_URL: sqlite:///${{ github.workspace }}/.alembic_tmp/drift.sqlite
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import pathlib, shutil, tempfile, sys
          from alembic.config import Config
          from alembic import command

          cfg = Config("backend/alembic.ini")
          tmp = pathlib.Path(tempfile.mkdtemp(prefix="alembic_drift_"))
          try:
              cfg.set_main_option("script_location", str(tmp))
              rev = command.revision(cfg, message="DRIFT_PROBE", autogenerate=True)
              vers = tmp / "versions"
              files = sorted(vers.glob("*.py")) if vers.exists() else []
              if not files:
                  print("No revision file created → no drift.")
                  sys.exit(0)
              code = files[0].read_text().lower()
              tokens = (
                  "op.create_table","op.alter_column","op.drop_table",
                  "op.add_column","op.drop_column","op.create_index","op.drop_index"
              )
              # copy to artifact dir for inspection
              outdir = pathlib.Path(".alembic_autogen/drift"); outdir.mkdir(parents=True, exist_ok=True)
              out = outdir / files[0].name
              out.write_text(code)
              if any(t in code for t in tokens):
                  print(f"Schema drift detected → see {out}")
                  sys.exit(1)
              print("Autogenerate produced a trivial/no-op file → no drift.")
          finally:
              shutil.rmtree(tmp, ignore_errors=True)
          PY

      - name: Upload drift artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alembic-drift-autogen
          path: .alembic_autogen/drift/**
          retention-days: 7
