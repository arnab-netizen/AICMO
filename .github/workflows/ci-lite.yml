name: ci-lite

on: [push, pull_request]

jobs:
  fast-sqlite:
    name: fast-sqlite (ci-lite) - quick sqlite + ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          pip install pytest
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Clear caches
        run: find backend -name '__pycache__' -type d -exec rm -rf {} +
      - name: Install mypy and ruff (typing/format guard)
        run: . .venv/bin/activate && python -m pip install mypy ruff
      - name: Run ruff/mypy quick checks
        run: |
          . .venv/bin/activate && ruff format --check backend && ruff check backend
      - name: Run quick sqlite tests
        run: . .venv/bin/activate && pytest -q backend/tests/test_db_sqlite.py backend/tests/test_db_utils.py -q

      - name: Alembic guards & offline render tests
        run: . .venv/bin/activate && pytest -q backend/tests/test_alembic_env_url_swap.py backend/tests/test_alembic_env_offline_ok.py

      - name: Alembic offline SQL render (smoke)
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
        run: |
          . .venv/bin/activate
          python -m pip install -r backend/requirements.txt || true
          alembic -c "$ALEMBIC_CONFIG" upgrade head --sql | head -n 5

      - name: Wait for Postgres
        if: ${{ contains(env.DATABASE_URL, 'postgresql') }}
        run: |
          python - <<'PY'
          import os, time, sqlalchemy as sa
          url=os.environ.get('DATABASE_URL','').replace('+asyncpg','+psycopg2')
          for _ in range(30):
              try:
                  sa.create_engine(url).connect().close(); print('Postgres ready'); break
              except Exception as e:
                  print('waiting...', e); time.sleep(2)
          else:
              raise SystemExit('Postgres not ready')
          PY

      - name: Verify psycopg2 import (quick)
        run: |
          . .venv/bin/activate
          python - <<'PY'
            import sys
            try:
                import psycopg2
                print('psycopg2 import OK')
            except Exception as e:
                sys.exit(f'psycopg2 import failed: {e}')
          PY

      - name: Check Alembic has a single head
        run: |
          . .venv/bin/activate
          python -m pip install -r backend/requirements.txt
          python backend/alembic/check_single_head.py

      - name: Render Alembic SQL to artifact
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
        run: |
          . .venv/bin/activate
          mkdir -p .alembic_sql
          ts="$(date -u +'%Y%m%dT%H%M%SZ')"
          out=".alembic_sql/upgrade_head_${ts}.sql"
          alembic -c "$ALEMBIC_CONFIG" upgrade head --sql > "$out"
          echo "Wrote $out"

      - name: Upload Alembic SQL artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alembic-sql
          path: .alembic_sql/
          if-no-files-found: error
          retention-days: 7

      - name: Check for model/schema drift (autogenerate dry-run)
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
        run: |
          . .venv/bin/activate
          python -m pip install -r backend/requirements.txt
          python - <<'PY'
            import io, sys, os
            from contextlib import redirect_stdout
            from alembic.config import Config
            from alembic import command

            buf = io.StringIO()
            cfg = Config(os.environ.get('ALEMBIC_CONFIG','backend/alembic.ini'))
            with redirect_stdout(buf):
                try:
                    command.revision(cfg, message='drift-check', autogenerate=True, sql=True)
                except SystemExit:
                    pass

            sql = buf.getvalue()
            danger = ('CREATE TABLE','ALTER TABLE','DROP TABLE','ADD CONSTRAINT','DROP CONSTRAINT')
            if any(tok in sql for tok in danger):
                print('Detected potential drift in autogenerate output:\n')
                print('\n'.join(sql.splitlines()[:120]))
                sys.exit(1)
            print('No drift detected.')
          PY

      - name: Run Alembic migrations (online)
        if: ${{ github.ref == 'refs/heads/main' && contains(env.DATABASE_URL, 'postgresql') }}
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
        run: |
          . .venv/bin/activate
          python -m pip install -r backend/requirements.txt
          alembic -c "$ALEMBIC_CONFIG" upgrade head

  drift_check:
    name: Alembic Drift Check
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/main' ||
      contains(join(fromJson(toJson(github.event.pull_request.labels)).*.name, ','), 'run-drift-check')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Dry-run autogenerate to detect drift
        env:
          ALEMBIC_CONFIG: backend/alembic.ini
        shell: bash
        run: |
          python - <<'PY'
            import io, sys
            from contextlib import redirect_stdout
            from alembic.config import Config
            from alembic import command

            buf = io.StringIO()
            cfg = Config('backend/alembic.ini')
            with redirect_stdout(buf):
                command.revision(cfg, autogenerate=True, message='DRIFT_PROBE', sql=True)
            sql = buf.getvalue()

            tokens = ('CREATE TABLE', 'ALTER TABLE', 'DROP TABLE', 'ADD COLUMN', 'DROP COLUMN', 'CREATE INDEX', 'DROP INDEX')
            drift = any(t in sql.upper() for t in tokens)
            if drift:
                print('Schema drift detected:\n---\n', sql[:4000], '\n---\n(failing to prevent silent drift)')
                sys.exit(1)
            else:
                print('No drift detected.')
          PY
