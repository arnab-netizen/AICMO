"""Alembic migration template for autogenerate drift probe
This is a minimal variant of Alembic's default template so CI can copy
`backend/alembic` into a temporary `script_location` and still find the
`script.py.mako` used to render generated revisions.
"""

from __future__ import annotations


from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

revision = "c1c4b4cbf95a"
down_revision = "20251023_align_idx_cols_safe"
branch_labels = None
depends_on = None


def upgrade():
    """Write your upgrade migrations here."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop dependent view first (if present), then drop tables/indexes safely.
    # Use IF EXISTS + CASCADE to avoid failing when objects are already absent
    # or when dependent objects (like views) exist. These drops are intentional
    # but should be reviewed before running in production.
    op.execute("DROP VIEW IF EXISTS site_spec CASCADE")
    op.execute("DROP TABLE IF EXISTS site_section CASCADE")
    op.execute("DROP INDEX IF EXISTS page_site_path_idx")
    op.execute("DROP TABLE IF EXISTS page CASCADE")
    op.execute("DROP INDEX IF EXISTS ux_site_slug")
    op.alter_column(
        "sitegen_events",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "sitegen_runs",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "sitegen_runs",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    # ### end Alembic commands ###


def downgrade():
    """Write your downgrade migrations here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "sitegen_runs",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "sitegen_runs",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "sitegen_events",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index("ux_site_slug", "site", ["slug"], unique=False)
    op.create_table(
        "page",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("site_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("path", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("title", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "seo", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["site_id"], ["site.id"], name="page_site_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="page_pkey"),
    )
    op.create_index("page_site_path_idx", "page", ["site_id", "path"], unique=False)
    op.create_table(
        "site_section",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("site_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "props", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True
        ),
        sa.Column(
            "order", sa.INTEGER(), server_default=sa.text("0"), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["site_id"], ["site.id"], name="site_section_site_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="site_section_pkey"),
    )
    # ### end Alembic commands ###
