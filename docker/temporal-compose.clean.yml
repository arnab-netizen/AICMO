version: '3.8'
services:
  postgres:
    image: postgres:14
    container_name: pg
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-temporal} -d ${POSTGRES_DB:-temporal} -h localhost"]
      interval: 5s
      timeout: 3s
      retries: 20

  temporal:
    image: temporalio/auto-setup:1.23.1
    container_name: temporal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: temporal
      POSTGRES_PWD: temporal
      POSTGRES_SEEDS: postgres
    ports:
      - "7233:7233"
    healthcheck:
      disable: true

  temporal-ready:
    image: temporalio/admin-tools:latest
    depends_on:
      temporal:
        condition: service_started
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    restart: "no"
    command:
      - sh
      - -lc
      - |
        set -eu
        echo "[temporal-ready] Waiting for Temporal at $$TEMPORAL_ADDRESS ..."
        for i in $$(seq 1 120); do
          if tctl --address "$$TEMPORAL_ADDRESS" cluster health >/dev/null 2>&1; then
            echo "[temporal-ready] SERVING (pass)"; exit 0
          fi
          echo "[temporal-ready] attempt=$$i waiting 1s..."
          sleep 1
        done
        echo "[temporal-ready] Timeout waiting for Temporal (fail)"; exit 1

  # keep a shell for manual tctl; no healthcheck, no confusion
  admin-tools:
    image: temporalio/admin-tools:latest
    depends_on:
      temporal:
        condition: service_started
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    command: ["sh", "-lc", "sleep infinity"]

  temporal-ui:
    image: temporalio/ui:2.30.0
    container_name: temporal-ui
    depends_on:
      temporal-ready:
        condition: service_completed_successfully
    environment:
      TEMPORAL_GRPC_ENDPOINT: temporal:7233
      TEMPORAL_UI_PORT: 8080
    ports:
      - "8080:8080"

  # Optional: run the Python worker inside compose for local dev.
  sitegen-worker:
    image: python:3.12-slim
    container_name: sitegen-worker
    depends_on:
      admin-tools:
        condition: service_started
    working_dir: /app
    volumes:
      - ./:/app:delegated
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"
    command: >
      sh -lc "pip install -r workers/requirements.txt && python -m workers.sitegen.worker_main"

networks:
  default:
    name: aicmo-net
